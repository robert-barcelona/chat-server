// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  conversationFragment: (
    where?: ConversationFragmentWhereInput
  ) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  conversationFragment: (
    where: ConversationFragmentWhereUniqueInput
  ) => ConversationFragmentNullablePromise;
  conversationFragments: (args?: {
    where?: ConversationFragmentWhereInput;
    orderBy?: ConversationFragmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ConversationFragment>;
  conversationFragmentsConnection: (args?: {
    where?: ConversationFragmentWhereInput;
    orderBy?: ConversationFragmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ConversationFragmentConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createConversationFragment: (
    data: ConversationFragmentCreateInput
  ) => ConversationFragmentPromise;
  updateConversationFragment: (args: {
    data: ConversationFragmentUpdateInput;
    where: ConversationFragmentWhereUniqueInput;
  }) => ConversationFragmentPromise;
  updateManyConversationFragments: (args: {
    data: ConversationFragmentUpdateManyMutationInput;
    where?: ConversationFragmentWhereInput;
  }) => BatchPayloadPromise;
  upsertConversationFragment: (args: {
    where: ConversationFragmentWhereUniqueInput;
    create: ConversationFragmentCreateInput;
    update: ConversationFragmentUpdateInput;
  }) => ConversationFragmentPromise;
  deleteConversationFragment: (
    where: ConversationFragmentWhereUniqueInput
  ) => ConversationFragmentPromise;
  deleteManyConversationFragments: (
    where?: ConversationFragmentWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  conversationFragment: (
    where?: ConversationFragmentSubscriptionWhereInput
  ) => ConversationFragmentSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ConversationFragmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "added_ASC"
  | "added_DESC"
  | "message_ASC"
  | "message_DESC"
  | "reply_ASC"
  | "reply_DESC"
  | "sessionID_ASC"
  | "sessionID_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ConversationFragmentCreateInput {
  id?: Maybe<ID_Input>;
  message: String;
  reply?: Maybe<String>;
  sessionID: String;
}

export interface ConversationFragmentUpdateInput {
  message?: Maybe<String>;
  reply?: Maybe<String>;
  sessionID?: Maybe<String>;
}

export interface ConversationFragmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  added?: Maybe<DateTimeInput>;
  added_not?: Maybe<DateTimeInput>;
  added_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  added_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  added_lt?: Maybe<DateTimeInput>;
  added_lte?: Maybe<DateTimeInput>;
  added_gt?: Maybe<DateTimeInput>;
  added_gte?: Maybe<DateTimeInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  reply?: Maybe<String>;
  reply_not?: Maybe<String>;
  reply_in?: Maybe<String[] | String>;
  reply_not_in?: Maybe<String[] | String>;
  reply_lt?: Maybe<String>;
  reply_lte?: Maybe<String>;
  reply_gt?: Maybe<String>;
  reply_gte?: Maybe<String>;
  reply_contains?: Maybe<String>;
  reply_not_contains?: Maybe<String>;
  reply_starts_with?: Maybe<String>;
  reply_not_starts_with?: Maybe<String>;
  reply_ends_with?: Maybe<String>;
  reply_not_ends_with?: Maybe<String>;
  sessionID?: Maybe<String>;
  sessionID_not?: Maybe<String>;
  sessionID_in?: Maybe<String[] | String>;
  sessionID_not_in?: Maybe<String[] | String>;
  sessionID_lt?: Maybe<String>;
  sessionID_lte?: Maybe<String>;
  sessionID_gt?: Maybe<String>;
  sessionID_gte?: Maybe<String>;
  sessionID_contains?: Maybe<String>;
  sessionID_not_contains?: Maybe<String>;
  sessionID_starts_with?: Maybe<String>;
  sessionID_not_starts_with?: Maybe<String>;
  sessionID_ends_with?: Maybe<String>;
  sessionID_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ConversationFragmentWhereInput[] | ConversationFragmentWhereInput
  >;
  OR?: Maybe<ConversationFragmentWhereInput[] | ConversationFragmentWhereInput>;
  NOT?: Maybe<
    ConversationFragmentWhereInput[] | ConversationFragmentWhereInput
  >;
}

export interface ConversationFragmentUpdateManyMutationInput {
  message?: Maybe<String>;
  reply?: Maybe<String>;
  sessionID?: Maybe<String>;
}

export interface ConversationFragmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ConversationFragmentWhereInput>;
  AND?: Maybe<
    | ConversationFragmentSubscriptionWhereInput[]
    | ConversationFragmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ConversationFragmentSubscriptionWhereInput[]
    | ConversationFragmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ConversationFragmentSubscriptionWhereInput[]
    | ConversationFragmentSubscriptionWhereInput
  >;
}

export type ConversationFragmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface ConversationFragmentEdge {
  node: ConversationFragment;
  cursor: String;
}

export interface ConversationFragmentEdgePromise
  extends Promise<ConversationFragmentEdge>,
    Fragmentable {
  node: <T = ConversationFragmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ConversationFragmentEdgeSubscription
  extends Promise<AsyncIterator<ConversationFragmentEdge>>,
    Fragmentable {
  node: <T = ConversationFragmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ConversationFragment {
  id: ID_Output;
  added: DateTimeOutput;
  message: String;
  reply?: String;
  sessionID: String;
}

export interface ConversationFragmentPromise
  extends Promise<ConversationFragment>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  added: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  reply: () => Promise<String>;
  sessionID: () => Promise<String>;
}

export interface ConversationFragmentSubscription
  extends Promise<AsyncIterator<ConversationFragment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  added: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  reply: () => Promise<AsyncIterator<String>>;
  sessionID: () => Promise<AsyncIterator<String>>;
}

export interface ConversationFragmentNullablePromise
  extends Promise<ConversationFragment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  added: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  reply: () => Promise<String>;
  sessionID: () => Promise<String>;
}

export interface ConversationFragmentSubscriptionPayload {
  mutation: MutationType;
  node: ConversationFragment;
  updatedFields: String[];
  previousValues: ConversationFragmentPreviousValues;
}

export interface ConversationFragmentSubscriptionPayloadPromise
  extends Promise<ConversationFragmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ConversationFragmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ConversationFragmentPreviousValuesPromise>() => T;
}

export interface ConversationFragmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ConversationFragmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ConversationFragmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ConversationFragmentPreviousValuesSubscription>() => T;
}

export interface ConversationFragmentConnection {
  pageInfo: PageInfo;
  edges: ConversationFragmentEdge[];
}

export interface ConversationFragmentConnectionPromise
  extends Promise<ConversationFragmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ConversationFragmentEdge>>() => T;
  aggregate: <T = AggregateConversationFragmentPromise>() => T;
}

export interface ConversationFragmentConnectionSubscription
  extends Promise<AsyncIterator<ConversationFragmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<ConversationFragmentEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateConversationFragmentSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateConversationFragment {
  count: Int;
}

export interface AggregateConversationFragmentPromise
  extends Promise<AggregateConversationFragment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateConversationFragmentSubscription
  extends Promise<AsyncIterator<AggregateConversationFragment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ConversationFragmentPreviousValues {
  id: ID_Output;
  added: DateTimeOutput;
  message: String;
  reply?: String;
  sessionID: String;
}

export interface ConversationFragmentPreviousValuesPromise
  extends Promise<ConversationFragmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  added: () => Promise<DateTimeOutput>;
  message: () => Promise<String>;
  reply: () => Promise<String>;
  sessionID: () => Promise<String>;
}

export interface ConversationFragmentPreviousValuesSubscription
  extends Promise<AsyncIterator<ConversationFragmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  added: () => Promise<AsyncIterator<DateTimeOutput>>;
  message: () => Promise<AsyncIterator<String>>;
  reply: () => Promise<AsyncIterator<String>>;
  sessionID: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "ConversationFragment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
